
# 2.  Найдите корни квадратного уравнения Ax² + Bx + C = 0 двумя способами: 
#     с помощью математических формул нахождения корней квадратного уравнения 
#     с помощью дополнительных библиотек Python (например, numpy.roots) 

# a, b, c = list(map(int, input('Введите три числа через пробел: ').split())) # Сами распакуются.
# d = b ** 2 - 4 * a * c
# if d > 0:
#     print((-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a))
# elif d == 0:
#     print(-b / (2 * a))
# else:
#     print('Корней нет.')

# Квадратное уравнение — это уравнение вида ax2 + bx + c = 0, 
# где a — первый или старший коэффициент, не равный нулю, b — второй коэффициент, 
# c — свободный член.
# Квадратные уравнения могут иметь два корня, один корень или не иметь корней.
# Чтобы определить, сколько корней имеет уравнение, нужно обратить внимание на дискриминант. 
# Как решать квадратные уравнения через дискриминант
# Алгоритм решения квадратного уравнения ax2 + bx + c = 0:
#     Определим, чему равны коэффициенты a, b, c.
#     Вычислим значение дискриминанта по формуле D = b2 − 4ac.
#     Если дискриминант D < 0, то корней нет.
#     Если D = 0, то есть один корень, равный −b/2a.
#     Если D > 0, то у уравнения две корня, равные
#     (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a))

#====================
"""
#import math
#print(math.pi)

from math import pi
print(pi)
"""
#===================

a = float(input("Введите число A: ")) 
b = float(input("Введите число B: ")) 
с = float(input("Введите число C: ")) 
discr = (b ** 2) - (4 * a * с) 
print(discr) 
if discr > 0:
    x1 = round((-b + ((discr) ** 0.5)) / (2 * a), 2) 
    x2 = round((-b - ((discr) ** 0.5)) / (2 * a), 2) 
    print(x1, x2) 
elif discr == 0: 
    x1 = round(-b / (2 * a), 2) 
    print(x1) 
elif discr < 0: print('Нет корней') 

#====================

# import numpy as np
# p = [3, 6, 9] 
# roots = np.roots(p) 
# print(roots) 

#======================

# import numpy
# p = [3, 6, 9] 
# roots = numpy.roots(p) 
# print(roots) 